#!/usr/bin/env python3
# coding: utf-8
# @File Name: lrcplayer.py
# @Author: Joshua Liu
# @Email: liuchaozhenyu@gmail.com
# @Create Date: 2017-08-03 10:08:10
# @Last Modified: 2017-08-03 20:08:05
# @Description:
import re
import os
import json
import time
import curses
import logging
from urllib.request import urlopen
from urllib.parse import quote
from curses.textpad import Textbox
from threading import Thread, Event
DEBUG = False
if DEBUG:
    from mem_top import mem_top

CMUS_LRC_HOME = os.path.expanduser('~/.cmus/lyrics/')
LOGFILE = os.path.expanduser('~/.cmus/cmus-lrc.log')

def configure_logging():
    f = logging.FileHandler(LOGFILE, 'w')
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    logger.addHandler(f)
    if DEBUG:
        logging.debug(mem_top())


def parse(path):
    try:
        with open(path, 'r') as f:
            lines = f.readlines()
    except:
        return {}

    re_lyric = re.compile(r'\[\d\d:\d\d.\d\d\]')
    lyrics = parse_lines(lines, re_lyric)
    if len(lyrics) == 0:
        re_lyric = re.compile(r'\[\d\d:\d\d]')
        lyrics = parse_lines(lines, re_lyric)

    return lyrics


def parse_lines(lines, re_lyric):
    lyrics = {}
    for line in lines:
        line = line.strip()
        matchs = re.findall(re_lyric, line)
        value = re.sub(re_lyric, '', line)
        for match in matchs:
            lyrics[_get_time(match)] = value

    return sorted(lyrics.items(), key=lambda i: i[0])


def _get_time(match):
    if len(match) > 7:
        minutes = int(match[1:3])
        seconds = int(match[4:6])
        miliseconds = int(match[7:9])
    else:
        minutes = int(match[1:3])
        seconds = int(match[4:6])
        miliseconds = 0
    return minutes * 60 + seconds + miliseconds / 100.0


def _kugo_get_songs(song):
    callback = 'jQuery191009360820465904207_1502077916336'
    api_pre = 'http://songsearch.kugou.com/song_search_v2?callback=' + callback + '&keyword='
    api_pram = '&page=1&pagesize=30&userid=-1&clientver=&platform=WebFilter&tag=em&filter=2&iscorrection=1&privilege_filter=0&_='
    timestamp = str(int(time.time() * 1000))
    url = api_pre + quote(song) + api_pram + timestamp
    jsn = []
    with urlopen(url) as f:
        text = f.read()
        if bytes == type(text):
            text = text.decode()
        text = text[len(callback)+1 : len(text)-2]
        jsn = json.loads(text)
        jsn = jsn['data']['lists']
    return jsn


def _kugo_get_song_info(info):
    api_pre = 'http://www.kugou.com/yy/index.php?r=play/getdata'
    hashid = info['FileHash']
    album_id = info['AlbumID']
    timestamp = str(int(time.time() * 1000))
    url = api_pre + '&hash=' + hashid + '&album_id=' + album_id + '&_=' + timestamp
    jsn = {}
    with urlopen(url) as f:
        text = f.read().decode()
        jsn = json.loads(text)
    return jsn


class Player:
    def __init__(self, mode='default'):
        self.lyrics = None
        self.song = {}
        self.mode = mode
        self.current = 0
        self.win = None
        self.notifyevent = Event()
        curses.wrapper(self.run)


    def query_lrc(self, song):
        if not os.path.isdir(CMUS_LRC_HOME):
            os.makedirs(CMUS_LRC_HOME)
        lyric_name = song['artist'] + ' - ' + song['title'] + '.lrc'
        if os.path.isfile(CMUS_LRC_HOME + lyric_name):
            return parse(CMUS_LRC_HOME + lyric_name)
        else:
            if self._download_lrc(song):
                return parse(CMUS_LRC_HOME + lyric_name)
            else:
                return {}

    def _download_lrc(self, song):
        if False:
            ok = self._download_lrc_gecimi(song, url)
            if not ok:
                url = base + quote(song['title'])
                ok = self._download_lrc_gecimi(song, url)
        else:
            ok = self._download_lrc_kugo(song)
        return ok


    def _download_lrc_kugo(self, song):
        songlist = _kugo_get_songs(song['title'])
        lyrics = ''
        for tune in songlist:
            if tune['SingerName'] == song['artist']:
                info = _kugo_get_song_info(tune)
                if len(info) > 0:
                    lyrics = info['data']['lyrics']
                break
        if len(lyrics) > 0:
            lyric_name = song['artist'] + ' - ' + song['title'] + '.lrc'
            try:
                with open(CMUS_LRC_HOME + lyric_name, 'w') as f:
                    f.write(lyrics)
            except:
                pass
            return True
        return False


    def _download_lrc_gecimi(self, song):
        base = 'http://gecimi.com/api/lyric/'
        url = base + quote(song['title']) + '/'
        url += quote(song['artist'])
        try:
            with urlopen(url) as f:
                text = f.read()
                if bytes == type(text):
                    lyric_json = json.loads(text.decode())
                elif str == type(text):
                    lyric_json = json.loads(text)

            if not lyric_json:
                return False
        except Exception as e:
            return False

        if 0 == lyric_json['code'] and lyric_json['count'] > 0:
            surl = lyric_json['result'][0]['lrc']
            with urlopen(surl) as f:
                text = f.read()

            lyric_name = song['artist'] + ' - ' + song['title'] + '.lrc'

            with open(CMUS_LRC_HOME + lyric_name, 'w') as f:
                f.write(text.decode('utf-8'))
            return True
        else:
            return False


    def query_curline(self):
        data = self._get_cmus_info()
        if not self._compare_song(data):
            if data['title']:
                logging.info('playing %s' % data['title'])
                if DEBUG:
                    logging.debug(mem_top())
                self.song = {'title': data['title'], 'artist': data['artist']}
                self.lyrics = self.query_lrc(self.song)

        if not self.lyrics or len(self.lyrics) == 0:
            return -1
        for i, (k, _) in enumerate(self.lyrics):
            if k >= data['position']:
                return i - 1 if i - 1 >= 0 else 0
        return len(self.lyrics) - 1


    def _compare_song(self, data):
        if 'title' in data and 'title' in self.song and 'artist' in data and 'artist' in self.song:
            if data['title'] == self.song['title'] and data['artist'] == self.song['artist']:
                return True
            else:
                return False
        return False


    def _get_cmus_info(self):
        text = os.popen('cmus-remote -Q').read()
        position, title, artist, album = self._parse_cmus(text)
        data = {'position': position, 'title': title, 'artist': artist, 'album': album}
        return data


    def _parse_cmus(self, text):
        '''
        status playing
        '''
        position = 0
        album = ''
        artist = ''
        title = ''
        lines = text.split('\n')
        for line in lines:
            if 'position' in line:
                position = int(line.split(' ')[1])
            elif 'tag artist' in line:
                artist = line.replace('tag artist ', '').replace('/', '-')
            elif 'tag album' in line:
                album = line.replace('tag album ', '').replace('/', '-')
            elif 'tag title' in line:
                title = line.replace('tag title ', '').replace('/', '-')

        return position, title, artist, album


    def run(self, screen):
        # 使用系统默认的配色
        curses.use_default_colors()
        # 指定当前行的配色。-1: 代表无背景色
        curses.init_pair(6, curses.COLOR_CYAN, -1) 
        # 获取当前 window 的最大宽高（以显示字节为单位）
        self.win = screen
        self.scroll(self.win, 0) # 从0行呈现

        # 使用 event.wait() 来产生 time tick 任务，每 0.5s 循环一次
        while not self.notifyevent.wait(0.5):
            cur = self.query_curline()
            if (-1 == cur):
                self.showinfo()
            else:
                self.scroll(self.win, cur)


    def showinfo(self):
        if 'title' in self.song:
            title = self.song['title'].strip()
        else:
            title = 'Unknown song'
        if 'artist' in self.song:
            artist = self.song['artist'].strip()
        else:
            artist = 'Unknown artist'
        wt = (len(title) + len(title.encode()))//2
        wa = (len(artist) + len(artist.encode()))//2
        h, w = self.win.getmaxyx()
        xt = (w-wt)//2 if w-wt>=0 else 0
        xa = (w-wa)//2 if w-wa>=0 else 0

        try:
            self.win.clear()
            self.win.addstr(h//2-1, xt, title)
            self.win.addstr(h//2, xa, artist)
            self.win.refresh()
        except Exception as e:
            pass



    def scroll(self, win, cur):
        '''
        @param cur: 当前播放的行数，相对于 self.lyrics
        '''
        if cur == self.current and cur != 0:
            return
        if not self.lyrics:
            return

        if cur < len(self.lyrics) and cur >= 0:
            self.current = cur
        else:
            return

        win.clear()
        h, w = win.getmaxyx()
        begin = self.current - int(h * 0.4)

        try:
            for i in range(0, h):
                if i + begin < 0 or i + begin > len(self.lyrics) - 1:
                    win.addstr(i, 0, '')
                else:
                    k, v = self.lyrics[i + begin]
                    v = v.strip()
                    lw = (len(v) + len(v.encode()))//2
                    x = (w-lw)//2 if w-lw>=0 else 0
                    ls = len(v) if len(v) <= w else w
                    if i + begin == self.current:
                        win.addstr(i, x, v[0:ls], curses.color_pair(6) | curses.A_BOLD)
                    else:
                        win.addstr(i, x, v[0:ls])
            win.refresh()
        except Exception as e:
            win.clear()
            x = (w-len(str(e)))//2 if w-len(str(e)) >= 0 else 0
            l = len(str(e)) if len(str(e)) <= w else w
            win.addstr(h//2, x, str(e)[0:l-1])
            win.refresh()


if __name__ == '__main__':
    configure_logging()
    player = Player()

